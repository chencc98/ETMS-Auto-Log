<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="522" height="456"
        title="Project Detail" showCloseButton="true"
        creationComplete="init();" >
    

    <!-- below the validator to validate the progress input -->
    <mx:NumberValidator allowNegative="false" domain="int" minValue="0" maxValue="100"
            source="{progress}" property="text"  id="progressValidate" required="true"
            invalidCharError="Only Integer 0-100 are allowed"/>
    <mx:Script>
        <![CDATA[
            import mx.events.ValidationResultEvent;
            import mx.validators.ValidationResult;
            import mx.events.CloseEvent;
            import pm.ProjectDetailPm;
            
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import mx.collections.ArrayCollection;
            import mx.collections.XMLListCollection;
            import mx.controls.Alert;
            import mx.managers.PopUpManager;
            import mx.rpc.events.FaultEvent;
            import mx.rpc.events.ResultEvent;
            
            import cairngormevents.AllEmployeeLoadEvent;
            import cairngormevents.ProjectEditEvent;
            import entity.Employee;
            import entity.MainPanelProject;
            import entity.ProjectStatus;
            import model.ExamModelLocator;
            import ui.EmployeeSelectorWrap;
            import utils.DateRandom;
            import utils.EmployeeSelectEvent;
            import utils.PopUpCloseEvent;
            import utils.ProjectRefreshEvent;
            

            
            private var employeeIDlist:String = "";
            [Bindable]
            public var projectDetailPm:ProjectDetailPm = new ProjectDetailPm();
            
            private var employeeSelectorPopRef:EmployeeSelector;

            private function init():void{
                
                
                this.addEventListener(Event.CLOSE, closeHandler);
                closeButtonBottom.addEventListener(MouseEvent.CLICK, closeHandler);
                editButton.addEventListener(MouseEvent.CLICK,editHandler);
                deleteEmployee.addEventListener(MouseEvent.CLICK, deleteEmployeeHandler);
                addEmployee.addEventListener(MouseEvent.CLICK, addEmployeeHandler);
                submitButton.addEventListener(MouseEvent.CLICK, submitHandler);
            }

            //the delete employee button event handler
            private function deleteEmployeeHandler(event:MouseEvent):void{
                if (employeeDG.selectedIndex < 0) {
                    Alert.show("No Employee selected");
                }else{
                    projectDetailPm.employeeList.removeItemAt(employeeDG.selectedIndex);
                }
            }

            //the add employee button event handler, will open employee selector ui
            private function addEmployeeHandler(event:MouseEvent):void {
                this.employeeSelectorPopRef = EmployeeSelectorWrap.getEmployeeSelector();
                this.employeeSelectorPopRef.employeeSelectorPm.loadAllEmployee();
                PopUpManager.addPopUp(this.employeeSelectorPopRef,this,true);
                PopUpManager.centerPopUp(this.employeeSelectorPopRef);

                this.employeeSelectorPopRef.addEventListener(PopUpCloseEvent.POPUP_CLOSE_EVENT, closeSelector);
                this.employeeSelectorPopRef.addEventListener(EmployeeSelectEvent.EMPLOY_SELECT_EVENT,
                        addSelectedEmployee);
                
            }
            
            private function closeSelector(event:Event):void{
                this.employeeSelectorPopRef.removeEventListener(PopUpCloseEvent.POPUP_CLOSE_EVENT, closeSelector);
                this.employeeSelectorPopRef.removeEventListener(EmployeeSelectEvent.EMPLOY_SELECT_EVENT,
                        addSelectedEmployee);
                PopUpManager.removePopUp(this.employeeSelectorPopRef);
            }
            
            private function addSelectedEmployee(event:EmployeeSelectEvent):void{
                closeSelector(null);
                
                var employee:Employee = event.EmployeeInside;
                var res:String = projectDetailPm.addEmployee(employee);
                if( res != ""){
                    Alert.show(res);
                }
            }
            

            private function closeHandler(event:Event):void{
                cleanEmployeeList();
                var closeEvent:ProjectRefreshEvent = new ProjectRefreshEvent(
                        ProjectRefreshEvent.REFRESH_EVENT, true, ProjectRefreshEvent.JUST_CLOSE);
                this.dispatchEvent(closeEvent);
//                var closeevent:PopUpCloseEvent = 
//                        new PopUpCloseEvent(PopUpCloseEvent.POPUP_CLOSE_EVENT);
//                this.dispatchEvent(closeevent);
            }
            
            //before remove this popup, please invoke this to clean employee list
            private function cleanEmployeeList():void{
                projectDetailPm.employeeList.removeAll();
//                progress.enabled = false;
//                addEmployee.enabled = false;
//                deleteEmployee.enabled = false;
//                editButton.enabled = true;
//                editButton.visible = true;
//                submitButton.enabled = false;
//                submitButton.visible = false;
            }

            private function editHandler(event:MouseEvent):void{
                //current mode is Edit, after click, edit is enabled

                projectDetailPm.startEdit();
            }
            
            private function submitHandler(event:MouseEvent):void{
                var validate:ValidationResultEvent = progressValidate.validate();
                if( validate.type == ValidationResultEvent.INVALID ){
                    return;
                }
                //below mode is submit, handler submit event
                //get the employee id list as xxxx,xxxx,xxx   and then transfer to remote
                employeeIDlist = "";
                var tempArr:ArrayCollection = projectDetailPm.employeeList;
                var len:Number = tempArr.length;
                var i:Number = 0;
                for( i = 0; i< len ; i++){
                    employeeIDlist += tempArr[i].id;
                    if( i != (len -1) ){
                        employeeIDlist += ",";
                    }
                }

                var editEvent:ProjectEditEvent = new ProjectEditEvent(ProjectEditEvent.PROJECT_EDIT,
                        projectDetailPm.projectDetail.id, 
                        progress.text,employeeIDlist, sendFeedback);
                CairngormEventDispatcher.getInstance().dispatchEvent(editEvent);
                
                //closeHandler(null);
            }
            
            private function sendFeedback(event:CloseEvent):void{
                var closeEvent:ProjectRefreshEvent = new ProjectRefreshEvent(
                        ProjectRefreshEvent.REFRESH_EVENT, true, ProjectRefreshEvent.DO_REFRESH);
                this.dispatchEvent(closeEvent);
            }



        ]]>
    </mx:Script>
    
    <mx:VBox>
        <mx:Grid>
            <mx:GridRow>
                <mx:GridItem>
                    <mx:Label text="ID:" width="45" height="17" textAlign="right"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label width="76" id="projectId" text="{projectDetailPm.projectDetail.id}"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label text="Name:" textAlign="right"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label width="76" id="projectName" text="{projectDetailPm.projectDetail.name}"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label text="Client:"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label width="87" id="client" text="{projectDetailPm.projectDetail.client}"/>
                </mx:GridItem>
            </mx:GridRow>
            <mx:GridRow>
                <mx:GridItem>
                    <mx:Label text="Status:" textAlign="right"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label width="76" id="projectStatus" text="{projectDetailPm.projectDetail.status}"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label text="Progress:" textAlign="right"/>
                </mx:GridItem>
                <mx:GridItem >
                    <mx:TextInput width="76" id="progress" enabled="{!projectDetailPm.isReadOnlyStatus}" 
                            text="{projectDetailPm.projectDetail.progress}"/>
                    <mx:Label text="%"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label />
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label />
                </mx:GridItem>
            </mx:GridRow>
        </mx:Grid>
    
        <mx:HBox>
            
        
            <mx:DataGrid  id="employeeDG" width="421" height="320"
                    dataProvider="{projectDetailPm.employeeList}">
                <mx:columns>
                    <mx:DataGridColumn headerText="ID" dataField="id"/>
                    <mx:DataGridColumn headerText="Name" dataField="name"/>
                    <mx:DataGridColumn headerText="Status"  itemRenderer="ui.EmployeeIcon" />
                </mx:columns>
            </mx:DataGrid>
            <mx:VBox>
                
            
                <mx:Button  label="Del" width="53" enabled="{!projectDetailPm.isReadOnlyStatus}" 
                    id="deleteEmployee"/>
                <mx:Button  label="Add" width="53" enabled="{!projectDetailPm.isReadOnlyStatus}" 
                    id="addEmployee"/>
            </mx:VBox>
        </mx:HBox>
        <mx:HBox>
            
        
        <mx:Button label="Edit" bottom="20" id="editButton" 
            enabled="{projectDetailPm.isEditable}"
            visible="{projectDetailPm.isReadOnlyStatus}"/>
        <mx:Button label="Submit" bottom="20" id="submitButton" enabled="true" 
            visible="{!projectDetailPm.isReadOnlyStatus}"/>
        <mx:Button label="Close" bottom="20" id="closeButtonBottom"/>
        </mx:HBox>
    </mx:VBox>
</mx:TitleWindow>
