<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="522" height="456"
        title="Project Detail" showCloseButton="true"
        creationComplete="init();" >
    <!-- below httpservice is used to get employee info -->	
    <mx:HTTPService
            showBusyCursor="true" id="httpServiceEmployee" resultFormat="xml"
            result="getEmployeeResult(event)" fault="getEmployeeFault(event)"/>
    <!-- below httpservice is used to edit the project -->
    <mx:HTTPService showBusyCursor="true" id="httpServiceEdit"  resultFormat="text"
            result="EditResult(event)" fault="EditFault(event)"/>

    <!-- below the validator to validate the progress input -->
    <mx:NumberValidator allowNegative="false" domain="int" minValue="0" maxValue="100"
            source="{progress}" property="text" />
    <mx:Script>
        <![CDATA[
            import mx.collections.XMLListCollection;
            import mx.controls.Alert;
            import mx.managers.PopUpManager;
            import mx.rpc.events.FaultEvent;
            import mx.rpc.events.ResultEvent;
            import entity.Employee;
            import ui.EmployeeSelectorWrap;
            import utils.DateRandom;
            import utils.EmployeeSelectEvent;
            import utils.ProjectRefreshEvent;

            [Bindable]
            private var employeelist:XMLListCollection;

            private var employeeIDlist:String = "";

            private function init():void{
                this.addEventListener(Event.CLOSE, closeHandler);
                closeButtonBottom.addEventListener(MouseEvent.CLICK, closeHandler);
                editButton.addEventListener(MouseEvent.CLICK,editHandler);
                deleteEmployee.addEventListener(MouseEvent.CLICK, deleteEmployeeHandler);
                addEmployee.addEventListener(MouseEvent.CLICK, addEmployeeHandler);
                submitButton.addEventListener(MouseEvent.CLICK, submitHandler);
            }

            //the delete employee button event handler
            private function deleteEmployeeHandler(event:MouseEvent):void{
                if (employeeDG.selectedIndex < 0) {
                    Alert.show("No Employee selected");
                }else{
                    employeelist.removeItemAt(employeeDG.selectedIndex);
                }
            }

            //the add employee button event handler, will open employee selector ui
            private function addEmployeeHandler(event:MouseEvent):void {

                var employeeSelector:EmployeeSelector = EmployeeSelectorWrap.getEmployeeSelector();
                
                PopUpManager.addPopUp(employeeSelector, this, true);
                PopUpManager.centerPopUp(employeeSelector);
                if (!employeeSelector.hasEventListener(EmployeeSelectEvent.EMPLOY_SELECT_EVENT)){
                    employeeSelector.addEventListener(EmployeeSelectEvent.EMPLOY_SELECT_EVENT,
                            insertEmployee);
                }
                employeeSelector.loadEmployee(); 
                
            }

            //after user select a user, it will dispatch the event and here we will capture and handler
            private function insertEmployee(event:EmployeeSelectEvent):void{
                var employee:Employee = event.EmployeeInside;
                //search the dataprovider, if the employee exist, ignore
                var len:Number = employeelist.length;
                for( var i:Number=0; i< len; i++){
                    if( employeelist[i].id == employee.employeeId ){
                        Alert.show("Existing Employee [" + employee.employeeName 
                                + "] detected, ignore!");
                        return;
                    }
                }

                //add this employee data into data provider
                var xml:XMLList = new XMLList(employee.toXMLFormat);
                employeelist.addItem(xml);

            }

            private function closeHandler(event:Event):void{
                cleanEmployeeList();
                PopUpManager.removePopUp(this);
            }
            
            //before remove this popup, please invoke this to clean employee list
            private function cleanEmployeeList():void{
                employeelist.removeAll();
            }

            private function editHandler(event:MouseEvent):void{
                //current mode is Edit, after click, edit is enabled

                progress.editable = true;
                progress.enabled = true;
                addEmployee.enabled = true;
                deleteEmployee.enabled = true;
                editButton.enabled = false;
                editButton.visible = false;
                submitButton.enabled = true;
                submitButton.visible = true;
            }
            
            private function submitHandler(event:MouseEvent):void{
                //below mode is submit, handler submit event
                //get the employee id list as xxxx,xxxx,xxx   and then transfer to remote
                employeeIDlist = "";
                var len:Number = employeelist.length;
                var i:Number = 0;
                for( i = 0; i< len ; i++){
                    employeeIDlist += employeelist[i].id;
                    if( i != (len -1) ){
                        employeeIDlist += ",";
                    }
                }

                var url:String = "http://localhost:8080/FlexExamDataService/EditProject?"
                        + "projectid=" + projectId.text + "&progress=" + progress.text
                        + "&employees=" + employeeIDlist + "&t=" + DateRandom.generate();
                httpServiceEdit.url = url;
                httpServiceEdit.send();
            }

            //update the project to handle the http
            private function EditFault(event:FaultEvent):void{
                Alert.show("Error when update Project with " + event.fault.faultDetail);
                this.dispatchEvent(new ProjectRefreshEvent(ProjectRefreshEvent.REFRESH_EVENT, true));
                cleanEmployeeList();
                PopUpManager.removePopUp(this);

            }
            private function EditResult(event:ResultEvent):void{
                var re:String = event.result as String;
                Alert.show(re);
                this.dispatchEvent(new ProjectRefreshEvent(ProjectRefreshEvent.REFRESH_EVENT, true) );
                cleanEmployeeList();
                PopUpManager.removePopUp(this);

            }

            //load the employee from remote, this's called by the parent to init
            public function loadEmployee():void{
                var url:String = 
                        "http://localhost:8080/FlexExamDataService/AllEmployeesInProject?projectid=";
                httpServiceEmployee.url = url + projectId.text
                        + "&t=" + DateRandom.generate();
                httpServiceEmployee.send();
            }
            //handle getemployee http 
            private function getEmployeeFault( event:FaultEvent ):void{
                Alert.show("Error when fetch Employee data with " + event.fault.faultDetail);
                PopUpManager.removePopUp(this);
            }
            private function getEmployeeResult(event:ResultEvent):void{
                var xmlresult:XML = XML(event.result);
                employeelist = new XMLListCollection(xmlresult.children());

            }

        ]]>
    </mx:Script>
    <mx:VBox>
        <mx:Grid>
            <mx:GridRow>
                <mx:GridItem>
                    <mx:Label text="ID:" width="45" height="17" textAlign="right"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label width="76" id="projectId"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label text="Name:" textAlign="right"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label width="76" id="projectName"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label text="Client:"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label width="87" id="client"/>
                </mx:GridItem>
            </mx:GridRow>
            <mx:GridRow>
                <mx:GridItem>
                    <mx:Label text="Status:" textAlign="right"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label width="76" id="projectStatus"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label text="Progress:" textAlign="right"/>
                </mx:GridItem>
                <mx:GridItem >
                    <mx:TextInput width="76" id="progress" enabled="false"/>
                    <mx:Label text="%"/>
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label />
                </mx:GridItem>
                <mx:GridItem>
                    <mx:Label />
                </mx:GridItem>
            </mx:GridRow>
        </mx:Grid>
    
        <mx:HBox>
            
        
            <mx:DataGrid  id="employeeDG" width="421" height="320"
                    dataProvider="{employeelist}">
                <mx:columns>
                    <mx:DataGridColumn headerText="ID" dataField="id"/>
                    <mx:DataGridColumn headerText="Name" dataField="name"/>
                    <mx:DataGridColumn headerText="Status"  itemRenderer="ui.EmployeeIcon" />
                </mx:columns>
            </mx:DataGrid>
            <mx:VBox>
                
            
                <mx:Button  label="Del" width="53" enabled="false" id="deleteEmployee"/>
                <mx:Button  label="Add" width="53" enabled="false" id="addEmployee"/>
            </mx:VBox>
        </mx:HBox>
        <mx:HBox>
            
        
        <mx:Button label="Edit" bottom="20" id="editButton"/>
        <mx:Button label="Submit" bottom="20" id="submitButton"/>
        <mx:Button label="Close" bottom="20" id="closeButtonBottom"/>
        </mx:HBox>
    </mx:VBox>
</mx:TitleWindow>
